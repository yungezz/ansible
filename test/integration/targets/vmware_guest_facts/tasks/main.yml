# Test code for the vmware_guest_facts module.
# Copyright: (c) 2017, Abhijeet Kasurde <akasurde@redhat.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: store the vcenter container ip
  set_fact:
    vcsim: "{{ lookup('env', 'vcenter_host') }}"

- debug: var=vcsim

- name: Wait for Flask controller to come up online
  wait_for:
    host: "{{ vcsim }}"
    port: 5000
    state: started

- name: kill vcsim
  uri:
    url: http://{{ vcsim }}:5000/killall

- name: start vcsim
  uri:
    url: http://{{ vcsim }}:5000/spawn?datacenter=1&cluster=1&folder=0
  register: vcsim_instance

- name: Wait for vcsim server to come up online
  wait_for:
    host: "{{ vcsim }}"
    port: 443
    state: started

- name: get a list of Datacenter from vcsim
  uri:
    url: http://{{ vcsim }}:5000/govc_find?filter=DC
  register: datacenters

- set_fact: dc1="{{ datacenters['json'][0] }}"

- name: get a list of hosts from vcsim
  uri:
    url: http://{{ vcsim }}:5000/govc_find?filter=H
  register: hosts

- set_fact: h1="{{ hosts['json'][0] }}"

- name: get a list of virtual machines from vcsim
  uri:
    url: http://{{ vcsim }}:5000/govc_find?filter=VM
  register: vms

- set_fact: vm1="{{ vms['json'][0] }}"

# Testcase 0001: Get details about virtual machines
- name: get list of facts about virtual machines
  vmware_guest_facts:
    validate_certs: False
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    datacenter: "{{ dc1 | basename }}"
    name: "{{ vm1 | basename }}"
    folder: "{{ vm1 | dirname }}"
  register: guest_facts_0001

- debug: msg="{{ guest_facts_0001 }}"

- assert:
    that:
      - "guest_facts_0001['instance']['hw_name'] == vm1 | basename"
      - "guest_facts_0001['instance']['hw_product_uuid'] is defined"
      - "guest_facts_0001['instance']['hw_cores_per_socket'] is defined"
      - "guest_facts_0001['instance']['hw_datastores'] is defined"
      - "guest_facts_0001['instance']['hw_esxi_host'] == h1 | basename"
      - "guest_facts_0001['instance']['hw_files'] is defined"
      - "guest_facts_0001['instance']['hw_guest_ha_state'] is defined"
      - "guest_facts_0001['instance']['hw_is_template'] is defined"
      - "guest_facts_0001['instance']['hw_folder'] is defined"
      - "guest_facts_0001['instance']['guest_question'] is defined"
      - "guest_facts_0001['instance']['guest_consolidation_needed'] is defined"
      - "'portgroup_portkey' in guest_facts_0001['instance']['hw_eth0']"
      - "'portgroup_key' in guest_facts_0001['instance']['hw_eth0']"

- set_fact: vm1_uuid="{{ guest_facts_0001['instance']['hw_product_uuid'] }}"

- debug: var=vm1_uuid

# Testcase 0002: Get details about virtual machines using UUID
- name: get list of facts about virtual machines using UUID
  vmware_guest_facts:
    validate_certs: False
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    datacenter: "{{ dc1 | basename }}"
    uuid: "{{ vm1_uuid }}"
  register: guest_facts_0002

- debug: msg="{{ guest_facts_0002 }}"

- assert:
    that:
      - "guest_facts_0002['instance']['hw_name'] == vm1 | basename"
      - "guest_facts_0002['instance']['hw_product_uuid'] is defined"
      - "guest_facts_0002['instance']['hw_product_uuid'] == vm1_uuid"
      - "guest_facts_0002['instance']['hw_cores_per_socket'] is defined"
      - "guest_facts_0001['instance']['hw_datastores'] is defined"
      - "guest_facts_0001['instance']['hw_esxi_host'] == h1 | basename"
      - "guest_facts_0001['instance']['hw_files'] is defined"
      - "guest_facts_0001['instance']['hw_guest_ha_state'] is defined"
      - "guest_facts_0001['instance']['hw_is_template'] is defined"
      - "guest_facts_0001['instance']['hw_folder'] is defined"
      - "guest_facts_0001['instance']['guest_question'] is defined"
      - "guest_facts_0001['instance']['guest_consolidation_needed'] is defined"

# Testcase 0003: Get details about virtual machines without snapshots using UUID
- name: get empty list of snapshots from virtual machine using UUID
  vmware_guest_facts:
    validate_certs: False
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    datacenter: "{{ dc1 | basename }}"
    uuid: "{{ vm1_uuid }}"
  register: guest_facts_0003

- debug: msg="{{ guest_facts_0003 }}"

- assert:
    that:
      - "guest_facts_0003['instance']['snapshots']|length == 0"
      - "guest_facts_0003['instance']['current_snapshot'] is none"

# Commenting as this is failing right now - 15 Dec 2017
# Testcase 0004: Get details about virtual machines with two snapshots using UUID
#- name: Create first snapshot
#  vmware_guest_snapshot:
#    validate_certs: False
#    hostname: "{{ vcsim }}"
#    username: "{{ vcsim_instance['json']['username'] }}"
#    password: "{{ vcsim_instance['json']['password'] }}"
#    datacenter: "{{ dc1 | basename }}"
#    name: "{{ vm1 | basename }}"
#    folder: "{{ vm1 | dirname }}"
#    state: present
#    snapshot_name: snap1

#- name: Create second snapshot
#  vmware_guest_snapshot:
#    validate_certs: False
#    hostname: "{{ vcsim }}"
#    username: "{{ vcsim_instance['json']['username'] }}"
#    password: "{{ vcsim_instance['json']['password'] }}"
#    datacenter: "{{ dc1 | basename }}"
#    name: "{{ vm1 | basename }}"
#    folder: "{{ vm1 | dirname }}"
#    state: present
#    snapshot_name: snap2

#- name: get list of snapshots from virtual machine using UUID
#  vmware_guest_facts:
#    validate_certs: False
#    hostname: "{{ vcsim }}"
#    username: "{{ vcsim_instance['json']['username'] }}"
#    password: "{{ vcsim_instance['json']['password'] }}"
#    datacenter: "{{ dc1 | basename }}"
#    uuid: "{{ vm1_uuid }}"
#  register: guest_facts_0004

#- debug: msg="{{ guest_facts_0004 }}"

#- assert:
#    that:
#      - "guest_facts_0004['instance']['snapshots'] is defined"
#      - "guest_facts_0004['instance']['snapshots'][0]['name'] == 'snap1'"
#      - "guest_facts_0004['instance']['snapshots'][1]['name'] == 'snap2'"
#      - "guest_facts_0004['instance']['current_snapshot']['name'] == 'snap2'"
#      - "guest_facts_0002['instance']['hw_folder'] == vm1 | dirname"
